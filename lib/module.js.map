{"mappings":"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","sources":["src/index.ts","src/AudioPlayer.tsx","src/AudioPlayerProvider.tsx"],"sourcesContent":["export * from \"./AudioPlayer\";\nexport * from \"./AudioPlayerProvider\";\n","import { type SyntheticEvent, useCallback, useEffect, useState } from \"react\";\nimport { useAudioPlayer } from \"./AudioPlayerProvider\";\n\ninterface AudioPlayerProps {\n\tsrc: string;\n\tautoPlay?: boolean;\n\n\tonProgress?: (progress: number) => void;\n\tonFirstPlay?: () => void;\n\tonEnded?: () => void;\n}\n\nexport const AudioPlayer = ({\n\tsrc,\n\tautoPlay = false,\n\n\tonProgress,\n\tonFirstPlay,\n\tonEnded,\n}: AudioPlayerProps) => {\n\tconst {\n\t\taudioRef,\n\n\t\tsetDuration,\n\t\tsetLoaded,\n\t\tsetCurrentTime,\n\t\tsetProgress,\n\t\tsetPlaying,\n\n\t\tplay,\n\t} = useAudioPlayer();\n\n\tconst [, setHasPlayedOnce] = useState(false);\n\tconst onPlay = useCallback(() => {\n\t\tsetPlaying(true);\n\t\tsetHasPlayedOnce((prev) => {\n\t\t\tif (prev === false && onFirstPlay) {\n\t\t\t\tonFirstPlay();\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\t}, [onFirstPlay, setPlaying]);\n\n\tconst onPause = useCallback(() => {\n\t\tsetPlaying(false);\n\t}, [setPlaying]);\n\n\t// LOADING CALLBACK\n\tconst onLoadedMetadata = useCallback(\n\t\t(e: SyntheticEvent<HTMLAudioElement, Event>) => {\n\t\t\tsetDuration(e.currentTarget.duration);\n\t\t},\n\t\t[setDuration],\n\t);\n\tconst onCanPlayThrough = useCallback(() => {\n\t\tsetLoaded(true);\n\t}, [setLoaded]);\n\n\t// TIME UPDATE CALLBACK\n\tconst onTimeUpdate = useCallback(\n\t\t(e: SyntheticEvent<HTMLAudioElement, Event>) => {\n\t\t\tif (e.currentTarget.currentTime && e.currentTarget.duration) {\n\t\t\t\tconst percent = (\n\t\t\t\t\t(e.currentTarget.currentTime / e.currentTarget.duration) *\n\t\t\t\t\t100\n\t\t\t\t).toFixed(2);\n\n\t\t\t\tsetProgress(+percent);\n\t\t\t\tif (onProgress) {\n\t\t\t\t\tonProgress(+percent);\n\t\t\t\t}\n\t\t\t\tsetCurrentTime(e.currentTarget.currentTime);\n\t\t\t}\n\t\t},\n\t\t[onProgress, setCurrentTime, setProgress],\n\t);\n\n\t// FORCE AUTOPLAY IF POSSIBLE\n\tuseEffect(() => {\n\t\tif (autoPlay) {\n\t\t\tplay();\n\t\t}\n\t}, [autoPlay, play]);\n\n\tuseEffect(() => {\n\t\tif (audioRef.current) {\n\t\t\tsetPlaying(false);\n\t\t\tsetLoaded(false);\n\t\t\tsetDuration(0);\n\t\t\tsetCurrentTime(0);\n\t\t\tsetProgress(0);\n\n\t\t\taudioRef.current.src = src;\n\t\t\taudioRef.current.load();\n\t\t}\n\t}, [\n\t\taudioRef,\n\t\tsetCurrentTime,\n\t\tsetDuration,\n\t\tsetLoaded,\n\t\tsetPlaying,\n\t\tsetProgress,\n\t\tsrc,\n\t]);\n\n\treturn (\n\t\t// biome-ignore lint/a11y/useMediaCaption: <explanation>\n\t\t<audio\n\t\t\tref={audioRef}\n\t\t\tstyle={{ display: \"none\" }}\n\t\t\tpreload=\"auto\"\n\t\t\tautoPlay={autoPlay}\n\t\t\tcontrols={false}\n\t\t\tonPlay={onPlay}\n\t\t\tonPause={onPause}\n\t\t\tonTimeUpdate={onTimeUpdate}\n\t\t\tonLoadedMetadata={onLoadedMetadata}\n\t\t\tonCanPlayThrough={onCanPlayThrough}\n\t\t\tonEnded={onEnded}\n\t\t/>\n\t);\n};\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport {\n\ttype PropsWithChildren,\n\ttype RefObject,\n\tcreateContext,\n\tuseCallback,\n\tuseContext,\n\tuseRef,\n\tuseState,\n} from \"react\";\n\ntype AudioPlayerContextProps = {\n\taudioRef: RefObject<HTMLAudioElement>;\n\n\tplaying: boolean;\n\n\tduration: number;\n\tloaded: boolean;\n\tcurrentTime: number;\n\tprogress: number; // %\n\n\tsetDuration: (duration: number) => void;\n\tsetLoaded: (loaded: boolean) => void;\n\tsetCurrentTime: (currentTime: number) => void;\n\tsetProgress: (progress: number) => void;\n\tsetPlaying: (playing: boolean) => void;\n\n\tplay: () => void;\n\tpause: () => void;\n\tseekTo: (second: number) => void;\n};\n\nconst AudioPlayerContext = createContext<AudioPlayerContextProps>({\n\taudioRef: { current: null },\n\n\tplaying: false,\n\tduration: 0,\n\tloaded: false,\n\tcurrentTime: 0,\n\tprogress: 0,\n\n\tsetDuration: () => {},\n\tsetLoaded: () => {},\n\tsetCurrentTime: () => {},\n\tsetProgress: () => {},\n\tsetPlaying: () => {},\n\n\tplay: () => {},\n\tpause: () => {},\n\tseekTo: () => {},\n});\n\nexport const useAudioPlayer = () => {\n\tconst context = useContext<AudioPlayerContextProps>(AudioPlayerContext);\n\tif (context === undefined) {\n\t\tthrow new Error(\"useAudioPlayer must be used within a AudioPlayer\");\n\t}\n\treturn context;\n};\n\nexport const AudioPlayerProvider = ({ children }: PropsWithChildren) => {\n\tconst audioRef = useRef<HTMLAudioElement>(null);\n\n\tconst [playing, setPlaying] = useState(false);\n\tconst [loaded, setLoaded] = useState(false);\n\tconst [duration, setDuration] = useState(0);\n\tconst [currentTime, setCurrentTime] = useState(0);\n\tconst [progress, setProgress] = useState(0);\n\n\tconst play = useCallback(() => {\n\t\tif (audioRef.current?.paused) {\n\t\t\taudioRef.current\n\t\t\t\t?.play()\n\t\t\t\t.then(() => {\n\t\t\t\t\tsetPlaying(true);\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tsetPlaying(false);\n\t\t\t\t});\n\t\t}\n\t}, []);\n\n\tconst pause = useCallback(() => {\n\t\tif (!audioRef.current?.paused) {\n\t\t\taudioRef.current?.pause();\n\t\t\tsetPlaying(false);\n\t\t}\n\t}, []);\n\n\tconst seekTo = useCallback(\n\t\t(timeInSeconds: number) => {\n\t\t\tif (timeInSeconds >= 0 && timeInSeconds <= duration && audioRef.current) {\n\t\t\t\taudioRef.current.currentTime = timeInSeconds;\n\t\t\t}\n\t\t},\n\t\t[duration],\n\t);\n\n\treturn (\n\t\t<AudioPlayerContext.Provider\n\t\t\tvalue={{\n\t\t\t\taudioRef,\n\t\t\t\tplaying,\n\n\t\t\t\tduration,\n\t\t\t\tloaded,\n\t\t\t\tcurrentTime,\n\t\t\t\tprogress,\n\n\t\t\t\tsetDuration,\n\t\t\t\tsetCurrentTime,\n\t\t\t\tsetLoaded,\n\t\t\t\tsetProgress,\n\t\t\t\tsetPlaying,\n\n\t\t\t\tplay,\n\t\t\t\tpause,\n\t\t\t\tseekTo,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</AudioPlayerContext.Provider>\n\t);\n};\n"],"names":[],"version":3,"file":"module.js.map"}